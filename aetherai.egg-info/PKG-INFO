Metadata-Version: 2.4
Name: aetherai
Version: 0.1.0
Summary: AetherAI - Interactive terminal assistant
Author: Nexus Maintainers
License: MIT License

        Copyright (c) 2025 KUNJ SHAH
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: PyYAML
Requires-Dist: rich
Requires-Dist: python-dotenv
Dynamic: license-file

# üöÄ NEXUS AI Terminal Assistant

[![GitHub Pages](https://img.shields.io/badge/GitHub%20Pages-Live-brightgreen)](https://kunjshah95.github.io/NEXUS-AI.io/)
[![Version](https://img.shields.io/badge/Version-3.0.1-blue)](CHANGELOG.md)
[![License](https://img.shields.io/badge/License-MIT-yellow)](LICENSE)
[![Python](https://img.shields.io/badge/Python-3.9%2B-green)](https://www.python.org/)

Production‚Äëready, secure, multi‚Äëmodel AI for your terminal. Switch between Google Gemini, Groq, Ollama (local), HuggingFace, ChatGPT (OpenAI), and MCP with one CLI, enriched by security controls, utilities, and an extensible modular architecture.

---

## Highlights

- Multi‚ÄëModel Switching: gemini, groq, ollama, huggingface, chatgpt, mcp
- Local AI via Ollama: list and select installed models with specs
- Secure by Default: input sanitization, safe command allowlist, file boundary checks
- Powerful Utilities: web search, sysinfo, notes, timers, unit conversions, quick weather
- Developer Tools: code review assistant, refactor helper, TODO extractor, Git helpers
- Productivity Suite: tasks manager, themes, reminders, analytics, games & learning
- Cross‚ÄëPlatform: Windows, macOS, Linux

---

## Prerequisites

- Python 3.9+
- Internet access for cloud models (Gemini/Groq/HF/ChatGPT/MCP)
- Optional: [Ollama](https://ollama.ai) installed and running for local models

---

## Installation

Choose the option that fits your environment.

### Option A: One‚Äëclick OS scripts

- Windows (PowerShell or CMD):
  - Minimal dependencies: `install_minimal.bat`
  - Full feature set: `install_advanced.bat`
  - Standard: `install.bat`
- macOS: `bash install_mac.sh`
- Linux: `bash install_linux.sh`

### Option B: From source (recommended for development)

```bash
# Clone
git clone https://github.com/KunjShah95/NEXUS-AI.io.git
cd NEXUS-AI.io

# Install dependencies
pip install -r requirements.txt

# Configure environment
cp .env.example .env   # set your API keys; see below

# Run
python terminal/main.py
```

---

## Configure API Keys

Create and edit a `.env` file at the project root with the following variables:

```
GEMINI_API_KEY=...
GROQ_API_KEY=...
HUGGINGFACE_TOKEN=...
OPENAI_API_KEY=...
MCP_API_KEY=...
```

- Ollama does not require an API key but must be installed and the daemon running.
- Per‚Äëuser config and data files live in:
  - Windows: `%USERPROFILE%\\.nexus`
  - macOS/Linux: `~/.nexus`

Files created:

- ~/.nexus/config.yaml (default model)
- ~/.nexus/users.json (local users)
- ~/.nexus/notes.txt (quick notes)

---

## Quick Start

```bash
python terminal/main.py
```

- Type `/help` to see the full command catalog.
- Switch models anytime with `/switch [model]` (e.g., `/switch groq`).
- Use `/ollama-models` to list your local Ollama models with specifications.

---

## Core Usage

A compact subset of the most useful commands. Use `/help` for the complete list.

- Models & status
  - `/models` ‚Äî list available AI backends and states
  - `/current-model` ‚Äî show the active model and description
  - `/switch gemini|groq|ollama|huggingface|chatgpt|mcp` ‚Äî change model
  - `/ollama-models` ‚Äî summary table of installed Ollama models (name, size, params, family, quant, modified)
  - `/ollama-models <name>` ‚Äî detailed specs for a single Ollama model
- System & utilities
  - `/run <safe-cmd>` ‚Äî run allowlisted commands (ls, pwd, whoami, date, cat, head, tail, df, du, free, uname, id, git)
  - `/sysinfo` ‚Äî OS, CPU, memory, disk stats
  - `/websearch <query>` ‚Äî quick DuckDuckGo search
  - `/weather <city>` ‚Äî current weather
  - `/note <text>` and `/notes` ‚Äî quick note and list
  - `/timer <seconds>` ‚Äî countdown with notification
  - `/calc <expr>` ‚Äî evaluate math expressions safely
  - `/convert <val> <from> <to>` ‚Äî quick unit conversions (temp/weight/data)
- Developer helpers
  - `/review ...`, `/codereview <file>`, `/refactor <file> <instruction>`
  - `/todos`, `/gendoc <file>`, `/gentest <file>`
  - Git: `/git status`, `/git add`, `/git commit`, `/git log`, `/git diff`, `/git branch`, `/git checkout`, `/git repo-info`, `/git stats` ‚Ä¶
- Productive UX
  - Tasks: `/task add <title>`, `/tasks`, `/task complete <id>`, `/task stats` ‚Ä¶
  - Themes: `/themes`, `/theme set <name>`, `/theme current`, `/theme reset`
  - Learning & games: `/challenge <difficulty>`, `/quiz <topic>`
  - Analytics & monitoring: `/analytics`, `/error-analytics`, `/start-monitoring`, `/health`

---

## Ollama Integration

- Install Ollama: <https://ollama.ai>
- Pull a model (examples): `ollama pull llama3`, `ollama pull mistral`
- In NEXUS:
  - `/ollama-models` ‚Äî lists installed models with size, family, params, quantization, modified date
  - `/ollama-models llama3:8b` ‚Äî full specs for a single model
  - `/switch ollama llama3:8b` ‚Äî use a specific local model

Troubleshooting:

- If you see ‚ÄúOllama not available,‚Äù ensure the daemon is running (e.g., `ollama serve`) and models are pulled.

---

## Security Model

- Input sanitization blocks dangerous patterns and suspicious Unicode.
- Safe command allowlist for `/run` (no shells/pipes/redirection/wildcards; current dir boundary enforced for file args).
- API key format validation for major providers.
- Config and user DB stored per user in `~/.nexus` with restricted permissions where supported.

---

## Packaging for Production

You can ship a single-file binary for operators who don‚Äôt want Python on the host.

Example with PyInstaller:

```bash
pip install pyinstaller
pyinstaller --onefile --name nexusai terminal/main.py
# Output will be in the dist/ directory as 'nexusai' (or nexusai.exe on Windows)
```

Distribute the binary and provide instructions to set environment variables (or bundle an `.env`).

---

## Troubleshooting

- Python not found:
  - Install Python 3.9+ and ensure `python --version` works in your shell.
- Dependencies fail to install:
  - `pip install --upgrade pip`
  - `pip install -r requirements.txt --no-cache-dir`
- API key errors:
  - Ensure `.env` exists and keys are valid; try a different provider with `/switch`.
- Ollama issues:
  - Make sure the Ollama service is running and models are pulled. Test with `ollama list`.
- Voice input:
  - Requires optional `speech_recognition` (and OS-specific audio dependencies). If unavailable, `/voice` will show guidance.

---

## Project Structure

```
## Project Structure

    NEXUS-AI.io/
    ‚îú‚îÄ‚îÄ index.html                # Website homepage
    ‚îú‚îÄ‚îÄ app.js                    # Website functionality
    ‚îú‚îÄ‚îÄ styles.css                # Website styles
    ‚îú‚îÄ‚îÄ CHANGELOG.md              # Version history
    ‚îú‚îÄ‚îÄ terminal/                 # Main application (CLI)
    ‚îÇ   ‚îú‚îÄ‚îÄ main.py               # Entry point
    ‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt      # Dependencies
    ‚îÇ   ‚îú‚îÄ‚îÄ install_*.{bat,sh}    # OS installers (root also contains installers)
    ‚îÇ   ‚îî‚îÄ‚îÄ tests/                # Unit tests
    ‚îú‚îÄ‚îÄ advanced_features.py
    ‚îú‚îÄ‚îÄ analytics_monitor.py
    ‚îú‚îÄ‚îÄ code_review_assistant.py
    ‚îú‚îÄ‚îÄ context_aware_ai.py
    ‚îú‚îÄ‚îÄ creative_tools.py
    ‚îú‚îÄ‚îÄ games_learning.py
    ‚îú‚îÄ‚îÄ advanced_security.py
    ‚îú‚îÄ‚îÄ task_manager.py
    ‚îú‚îÄ‚îÄ theme_manager.py
    ‚îú‚îÄ‚îÄ integration_hub.py
    ‚îî‚îÄ‚îÄ README.md
```

---

## Release & Governance

- Versioning: Semantic versioning tracked in `CHANGELOG.md` (badge shows current).
- Security: See `SECURITY.md` for reporting and policies.
- Code of Conduct: See `CODE_OF_CONDUCT.md`.
- Contribution: See `CONTRIBUTING.md`.

---

## Contributing

We welcome feature ideas, bug reports, and PRs.

1. Fork the repo
2. Create a branch: `git checkout -b feat/your-feature`
3. Install deps: `pip install -r requirements.txt`
4. Commit and push: `git commit -m "feat: add your feature"`
5. Open a Pull Request with a clear description and context

---

## License

MIT License ‚Äî see [LICENSE](LICENSE)

---

## Support & Links

- Website: [Project website](https://kunjshah95.github.io/NEXUS-AI.io/)
- Issues: [Issue tracker](https://github.com/KunjShah95/NEXUS-AI.io/issues)
- Changelog: [CHANGELOG.md](CHANGELOG.md)
- Security Policy: [SECURITY.md](SECURITY.md)
- Code of Conduct: [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md)
- Contributing Guide: [CONTRIBUTING.md](CONTRIBUTING.md)

If this project helps you, consider starring the repo. It helps others find it too.
